// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for Gender.
const (
	Female Gender = "female"
	Male   Gender = "male"
)

// Address defines model for Address.
type Address struct {
	City   *string `json:"city,omitempty"`
	State  *string `json:"state,omitempty"`
	Street *string `json:"street,omitempty"`
	Zip    *string `json:"zip,omitempty"`
}

// Gender defines model for Gender.
type Gender string

// NewRecordCondition defines model for NewRecordCondition.
type NewRecordCondition struct {
	// Description Description of the condition
	Description *string `json:"description,omitempty"`

	// End Date the condition was resolved
	End *openapi_types.Date `json:"end,omitempty"`

	// Name Name of the condition
	Name string `json:"name"`

	// PatientId Unique identifier for the patient who has the condition
	PatientId string `json:"patient_id"`

	// ProviderId Unique identifier for the provider who diagnosed the condition
	ProviderId string `json:"provider_id"`

	// Start Date the condition was diagnosed
	Start openapi_types.Date `json:"start"`
}

// NewRecordEncounter defines model for NewRecordEncounter.
type NewRecordEncounter struct {
	// Description Description of the encounter, if necessary
	Description *string `json:"description,omitempty"`

	// PatientId Unique identifier for the patient who had the encounter
	PatientId string `json:"patient_id"`

	// ProviderId Unique identifier for the provider who had the encounter
	ProviderId string `json:"provider_id"`

	// Reason Reason for the encounter
	Reason string `json:"reason"`
}

// NewRecordImmunization defines model for NewRecordImmunization.
type NewRecordImmunization struct {
	// PatientId Unique identifier for the patient who received the immunization
	PatientId string `json:"patient_id"`

	// ProviderId Unique identifier for the provider who administered the immunization
	ProviderId string `json:"provider_id"`

	// VaccineDate Date the vaccine was administered
	VaccineDate openapi_types.Date `json:"vaccine_date"`

	// VaccineExpiration Date the vaccine expires
	VaccineExpiration *openapi_types.Date `json:"vaccine_expiration,omitempty"`

	// VaccineName Name of the vaccine
	VaccineName string `json:"vaccine_name"`
}

// NewRecordMedication defines model for NewRecordMedication.
type NewRecordMedication struct {
	// Dose Dosage of the medication
	Dose string `json:"dose"`

	// EncounterId Unique identifier for the encounter where the medication was prescribed
	EncounterId *string `json:"encounter_id,omitempty"`

	// End Date the medication stopped
	End openapi_types.Date `json:"end"`

	// Name Name of the medication
	Name string `json:"name"`

	// PatientId Unique identifier for the patient who received the medication
	PatientId string `json:"patient_id"`

	// ProviderId Unique identifier for the provider who prescribed the medication
	ProviderId string `json:"provider_id"`

	// Start Date the medication was started
	Start openapi_types.Date `json:"start"`
}

// NewRecordPatient defines model for NewRecordPatient.
type NewRecordPatient struct {
	Address *Address `json:"address,omitempty"`

	// Birthdate Patient's date of birth
	Birthdate openapi_types.Date `json:"birthdate"`

	// First Patient's first name
	First  string `json:"first"`
	Gender Gender `json:"gender"`

	// Last Patient's last name
	Last string `json:"last"`

	// Middle Patient's middle name
	Middle *string `json:"middle,omitempty"`
}

// NewRecordProvider defines model for NewRecordProvider.
type NewRecordProvider struct {
	Address *Address `json:"address,omitempty"`
	Gender  *Gender  `json:"gender,omitempty"`

	// Name Provider's name
	Name string `json:"name"`

	// Speciality Provider's speciality
	Speciality string `json:"speciality"`
}

// RecordCondition defines model for RecordCondition.
type RecordCondition struct {
	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the condition
	Description *string `json:"description,omitempty"`

	// End Date the condition was resolved
	End *openapi_types.Date `json:"end,omitempty"`

	// Id Unique identifier for the condition record
	Id string `json:"id"`

	// Name Name of the condition
	Name *string `json:"name,omitempty"`

	// PatientId Unique identifier for the patient who has the condition
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who diagnosed the condition
	ProviderId *string `json:"provider_id,omitempty"`

	// Start Date the condition was diagnosed
	Start *openapi_types.Date `json:"start,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RecordEncounter defines model for RecordEncounter.
type RecordEncounter struct {
	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the encounter, if necessary
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the encounter record
	Id string `json:"id"`

	// PatientId Unique identifier for the patient who had the encounter
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who had the encounter
	ProviderId *string `json:"provider_id,omitempty"`

	// Reason Reason for the encounter
	Reason *string `json:"reason,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RecordImmunization defines model for RecordImmunization.
type RecordImmunization struct {
	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the immunization record
	Id string `json:"id"`

	// PatientId Unique identifier for the patient who received the immunization
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who administered the immunization
	ProviderId *string `json:"provider_id,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VaccineDate Date the vaccine was administered
	VaccineDate *openapi_types.Date `json:"vaccine_date,omitempty"`

	// VaccineExpiration Date the vaccine expires
	VaccineExpiration *openapi_types.Date `json:"vaccine_expiration,omitempty"`

	// VaccineName Name of the vaccine
	VaccineName *string `json:"vaccine_name,omitempty"`
}

// RecordMedication defines model for RecordMedication.
type RecordMedication struct {
	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Dose Dosage of the medication
	Dose *string `json:"dose,omitempty"`

	// EncounterId Unique identifier for the encounter where the medication was prescribed
	EncounterId *string `json:"encounter_id,omitempty"`

	// End Date the medication stopped
	End *openapi_types.Date `json:"end,omitempty"`

	// Id Unique identifier for the medication record
	Id string `json:"id"`

	// Name Name of the medication
	Name *string `json:"name,omitempty"`

	// PatientId Unique identifier for the patient who received the medication
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who prescribed the medication
	ProviderId *string `json:"provider_id,omitempty"`

	// Start Date the medication was started
	Start *openapi_types.Date `json:"start,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RecordPatient defines model for RecordPatient.
type RecordPatient struct {
	Address *Address `json:"address,omitempty"`

	// Birthdate Patient's date of birth
	Birthdate *openapi_types.Date `json:"birthdate,omitempty"`

	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// First Patient's first name
	First  *string `json:"first,omitempty"`
	Gender *Gender `json:"gender,omitempty"`

	// Id Unique identifier for the patient record
	Id string `json:"id"`

	// Last Patient's last name
	Last *string `json:"last,omitempty"`

	// Middle Patient's middle name
	Middle *string `json:"middle,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RecordProvider defines model for RecordProvider.
type RecordProvider struct {
	Address *Address `json:"address,omitempty"`

	// CreatedAt Date and time the record was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Gender    *Gender    `json:"gender,omitempty"`

	// Id Unique identifier for the provider record
	Id string `json:"id"`

	// Name Provider's name
	Name *string `json:"name,omitempty"`

	// Speciality Provider's speciality
	Speciality *string `json:"speciality,omitempty"`

	// UpdatedAt Date and time the record was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UpdateRecordCondition Fields to update for a condition record
type UpdateRecordCondition struct {
	// Description Description of the condition
	Description *string `json:"description,omitempty"`

	// End Date the condition was resolved
	End *openapi_types.Date `json:"end,omitempty"`

	// Name Name of the condition
	Name *string `json:"name,omitempty"`

	// PatientId Unique identifier for the patient who has the condition
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who diagnosed the condition
	ProviderId *string `json:"provider_id,omitempty"`

	// Start Date the condition was diagnosed
	Start *openapi_types.Date `json:"start,omitempty"`
}

// UpdateRecordEncounter Fields to update for an encounter record
type UpdateRecordEncounter struct {
	// Description Description of the encounter, if necessary
	Description *string `json:"description,omitempty"`

	// PatientId Unique identifier for the patient who had the encounter
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who had the encounter
	ProviderId *string `json:"provider_id,omitempty"`

	// Reason Reason for the encounter
	Reason *string `json:"reason,omitempty"`
}

// UpdateRecordImmunization Fields to update for an immunization record
type UpdateRecordImmunization struct {
	// PatientId Unique identifier for the patient who received the immunization
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who administered the immunization
	ProviderId *string `json:"provider_id,omitempty"`

	// VaccineDate Date the vaccine was administered
	VaccineDate *openapi_types.Date `json:"vaccine_date,omitempty"`

	// VaccineExpiration Date the vaccine expires
	VaccineExpiration *openapi_types.Date `json:"vaccine_expiration,omitempty"`

	// VaccineName Name of the vaccine
	VaccineName *string `json:"vaccine_name,omitempty"`
}

// UpdateRecordMedication Fields to update for a medication record
type UpdateRecordMedication struct {
	// Dose Dosage of the medication
	Dose *string `json:"dose,omitempty"`

	// EncounterId Unique identifier for the encounter where the medication was prescribed
	EncounterId *string `json:"encounter_id,omitempty"`

	// End Date the medication stopped
	End *openapi_types.Date `json:"end,omitempty"`

	// Name Name of the medication
	Name *string `json:"name,omitempty"`

	// PatientId Unique identifier for the patient who received the medication
	PatientId *string `json:"patient_id,omitempty"`

	// ProviderId Unique identifier for the provider who prescribed the medication
	ProviderId *string `json:"provider_id,omitempty"`

	// Start Date the medication was started
	Start *openapi_types.Date `json:"start,omitempty"`
}

// UpdateRecordPatient Fields to update for a patient record
type UpdateRecordPatient struct {
	Address *Address `json:"address,omitempty"`

	// Birthdate Patient's date of birth
	Birthdate *openapi_types.Date `json:"birthdate,omitempty"`

	// First Patient's first name
	First  *string `json:"first,omitempty"`
	Gender *Gender `json:"gender,omitempty"`

	// Last Patient's last name
	Last *string `json:"last,omitempty"`

	// Middle Patient's middle name
	Middle *string `json:"middle,omitempty"`
}

// UpdateRecordProvider Fields to update for a provider record
type UpdateRecordProvider struct {
	Address *Address `json:"address,omitempty"`
	Gender  *Gender  `json:"gender,omitempty"`

	// Name Provider's name
	Name *string `json:"name,omitempty"`

	// Speciality Provider's speciality
	Speciality *string `json:"speciality,omitempty"`
}

// CreateConditionRecordJSONRequestBody defines body for CreateConditionRecord for application/json ContentType.
type CreateConditionRecordJSONRequestBody = NewRecordCondition

// UpdateConditionRecordJSONRequestBody defines body for UpdateConditionRecord for application/json ContentType.
type UpdateConditionRecordJSONRequestBody = UpdateRecordCondition

// CreateEncounterRecordJSONRequestBody defines body for CreateEncounterRecord for application/json ContentType.
type CreateEncounterRecordJSONRequestBody = NewRecordEncounter

// UpdateEncounterRecordJSONRequestBody defines body for UpdateEncounterRecord for application/json ContentType.
type UpdateEncounterRecordJSONRequestBody = UpdateRecordEncounter

// CreateImmunizationRecordJSONRequestBody defines body for CreateImmunizationRecord for application/json ContentType.
type CreateImmunizationRecordJSONRequestBody = NewRecordImmunization

// UpdateImmunizationRecordJSONRequestBody defines body for UpdateImmunizationRecord for application/json ContentType.
type UpdateImmunizationRecordJSONRequestBody = UpdateRecordImmunization

// CreateMedicationRecordJSONRequestBody defines body for CreateMedicationRecord for application/json ContentType.
type CreateMedicationRecordJSONRequestBody = NewRecordMedication

// UpdateMedicationRecordJSONRequestBody defines body for UpdateMedicationRecord for application/json ContentType.
type UpdateMedicationRecordJSONRequestBody = UpdateRecordMedication

// CreatePatientRecordJSONRequestBody defines body for CreatePatientRecord for application/json ContentType.
type CreatePatientRecordJSONRequestBody = NewRecordPatient

// UpdatePatientRecordJSONRequestBody defines body for UpdatePatientRecord for application/json ContentType.
type UpdatePatientRecordJSONRequestBody = UpdateRecordPatient

// CreateProviderRecordJSONRequestBody defines body for CreateProviderRecord for application/json ContentType.
type CreateProviderRecordJSONRequestBody = NewRecordProvider

// UpdateProviderRecordJSONRequestBody defines body for UpdateProviderRecord for application/json ContentType.
type UpdateProviderRecordJSONRequestBody = UpdateRecordProvider

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check the health of the API
	// (GET /health)
	CheckHealth(c *gin.Context)
	// Create a new condition record
	// (POST /record/condition)
	CreateConditionRecord(c *gin.Context)
	// Delete a condition record
	// (DELETE /record/condition/{conditionId})
	DeleteConditionRecord(c *gin.Context, conditionId string)
	// Get a condition record by ID
	// (GET /record/condition/{conditionId})
	GetConditionRecord(c *gin.Context, conditionId string)
	// Update a condition record
	// (PATCH /record/condition/{conditionId})
	UpdateConditionRecord(c *gin.Context, conditionId string)
	// Create a new encounter record
	// (POST /record/encounter)
	CreateEncounterRecord(c *gin.Context)
	// Delete an encounter record
	// (DELETE /record/encounter/{encounterId})
	DeleteEncounterRecord(c *gin.Context, encounterId string)
	// Get an encounter record by ID
	// (GET /record/encounter/{encounterId})
	GetEncounterRecord(c *gin.Context, encounterId string)
	// Update an encounter record
	// (PATCH /record/encounter/{encounterId})
	UpdateEncounterRecord(c *gin.Context, encounterId string)
	// Create a new immunization record
	// (POST /record/immunization)
	CreateImmunizationRecord(c *gin.Context)
	// Delete an immunization record
	// (DELETE /record/immunization/{immunizationId})
	DeleteImmunizationRecord(c *gin.Context, immunizationId string)
	// Get an immunization record by ID
	// (GET /record/immunization/{immunizationId})
	GetImmunizationRecord(c *gin.Context, immunizationId string)
	// Update an immunization record
	// (PATCH /record/immunization/{immunizationId})
	UpdateImmunizationRecord(c *gin.Context, immunizationId string)
	// Create a new medication record
	// (POST /record/medication)
	CreateMedicationRecord(c *gin.Context)
	// Delete a medication record
	// (DELETE /record/medication/{medicationId})
	DeleteMedicationRecord(c *gin.Context, medicationId string)
	// Get a medication record by ID
	// (GET /record/medication/{medicationId})
	GetMedicationRecord(c *gin.Context, medicationId string)
	// Update a medication record
	// (PATCH /record/medication/{medicationId})
	UpdateMedicationRecord(c *gin.Context, medicationId string)
	// Create a new patient record
	// (POST /record/patient)
	CreatePatientRecord(c *gin.Context)
	// Delete a patient record
	// (DELETE /record/patient/{patientId})
	DeletePatientRecord(c *gin.Context, patientId string)
	// Get a patient record by ID
	// (GET /record/patient/{patientId})
	GetPatientRecord(c *gin.Context, patientId string)
	// Update a patient record
	// (PATCH /record/patient/{patientId})
	UpdatePatientRecord(c *gin.Context, patientId string)
	// Create a new provider record
	// (POST /record/provider)
	CreateProviderRecord(c *gin.Context)
	// Delete a provider record
	// (DELETE /record/provider/{providerId})
	DeleteProviderRecord(c *gin.Context, providerId string)
	// Get a provider record by ID
	// (GET /record/provider/{providerId})
	GetProviderRecord(c *gin.Context, providerId string)
	// Update a provider record
	// (PATCH /record/provider/{providerId})
	UpdateProviderRecord(c *gin.Context, providerId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckHealth operation middleware
func (siw *ServerInterfaceWrapper) CheckHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckHealth(c)
}

// CreateConditionRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateConditionRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateConditionRecord(c)
}

// DeleteConditionRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteConditionRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId string

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", c.Param("conditionId"), &conditionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter conditionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteConditionRecord(c, conditionId)
}

// GetConditionRecord operation middleware
func (siw *ServerInterfaceWrapper) GetConditionRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId string

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", c.Param("conditionId"), &conditionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter conditionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConditionRecord(c, conditionId)
}

// UpdateConditionRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateConditionRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "conditionId" -------------
	var conditionId string

	err = runtime.BindStyledParameterWithOptions("simple", "conditionId", c.Param("conditionId"), &conditionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter conditionId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateConditionRecord(c, conditionId)
}

// CreateEncounterRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateEncounterRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEncounterRecord(c)
}

// DeleteEncounterRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteEncounterRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "encounterId" -------------
	var encounterId string

	err = runtime.BindStyledParameterWithOptions("simple", "encounterId", c.Param("encounterId"), &encounterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter encounterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEncounterRecord(c, encounterId)
}

// GetEncounterRecord operation middleware
func (siw *ServerInterfaceWrapper) GetEncounterRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "encounterId" -------------
	var encounterId string

	err = runtime.BindStyledParameterWithOptions("simple", "encounterId", c.Param("encounterId"), &encounterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter encounterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEncounterRecord(c, encounterId)
}

// UpdateEncounterRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateEncounterRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "encounterId" -------------
	var encounterId string

	err = runtime.BindStyledParameterWithOptions("simple", "encounterId", c.Param("encounterId"), &encounterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter encounterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEncounterRecord(c, encounterId)
}

// CreateImmunizationRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateImmunizationRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateImmunizationRecord(c)
}

// DeleteImmunizationRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteImmunizationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "immunizationId" -------------
	var immunizationId string

	err = runtime.BindStyledParameterWithOptions("simple", "immunizationId", c.Param("immunizationId"), &immunizationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter immunizationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteImmunizationRecord(c, immunizationId)
}

// GetImmunizationRecord operation middleware
func (siw *ServerInterfaceWrapper) GetImmunizationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "immunizationId" -------------
	var immunizationId string

	err = runtime.BindStyledParameterWithOptions("simple", "immunizationId", c.Param("immunizationId"), &immunizationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter immunizationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetImmunizationRecord(c, immunizationId)
}

// UpdateImmunizationRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateImmunizationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "immunizationId" -------------
	var immunizationId string

	err = runtime.BindStyledParameterWithOptions("simple", "immunizationId", c.Param("immunizationId"), &immunizationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter immunizationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateImmunizationRecord(c, immunizationId)
}

// CreateMedicationRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateMedicationRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateMedicationRecord(c)
}

// DeleteMedicationRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteMedicationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicationId" -------------
	var medicationId string

	err = runtime.BindStyledParameterWithOptions("simple", "medicationId", c.Param("medicationId"), &medicationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMedicationRecord(c, medicationId)
}

// GetMedicationRecord operation middleware
func (siw *ServerInterfaceWrapper) GetMedicationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicationId" -------------
	var medicationId string

	err = runtime.BindStyledParameterWithOptions("simple", "medicationId", c.Param("medicationId"), &medicationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMedicationRecord(c, medicationId)
}

// UpdateMedicationRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateMedicationRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicationId" -------------
	var medicationId string

	err = runtime.BindStyledParameterWithOptions("simple", "medicationId", c.Param("medicationId"), &medicationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicationId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMedicationRecord(c, medicationId)
}

// CreatePatientRecord operation middleware
func (siw *ServerInterfaceWrapper) CreatePatientRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePatientRecord(c)
}

// DeletePatientRecord operation middleware
func (siw *ServerInterfaceWrapper) DeletePatientRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", c.Param("patientId"), &patientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter patientId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePatientRecord(c, patientId)
}

// GetPatientRecord operation middleware
func (siw *ServerInterfaceWrapper) GetPatientRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", c.Param("patientId"), &patientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter patientId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPatientRecord(c, patientId)
}

// UpdatePatientRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdatePatientRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "patientId" -------------
	var patientId string

	err = runtime.BindStyledParameterWithOptions("simple", "patientId", c.Param("patientId"), &patientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter patientId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePatientRecord(c, patientId)
}

// CreateProviderRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateProviderRecord(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProviderRecord(c)
}

// DeleteProviderRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteProviderRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", c.Param("providerId"), &providerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter providerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProviderRecord(c, providerId)
}

// GetProviderRecord operation middleware
func (siw *ServerInterfaceWrapper) GetProviderRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", c.Param("providerId"), &providerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter providerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviderRecord(c, providerId)
}

// UpdateProviderRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateProviderRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithOptions("simple", "providerId", c.Param("providerId"), &providerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter providerId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProviderRecord(c, providerId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.CheckHealth)
	router.POST(options.BaseURL+"/record/condition", wrapper.CreateConditionRecord)
	router.DELETE(options.BaseURL+"/record/condition/:conditionId", wrapper.DeleteConditionRecord)
	router.GET(options.BaseURL+"/record/condition/:conditionId", wrapper.GetConditionRecord)
	router.PATCH(options.BaseURL+"/record/condition/:conditionId", wrapper.UpdateConditionRecord)
	router.POST(options.BaseURL+"/record/encounter", wrapper.CreateEncounterRecord)
	router.DELETE(options.BaseURL+"/record/encounter/:encounterId", wrapper.DeleteEncounterRecord)
	router.GET(options.BaseURL+"/record/encounter/:encounterId", wrapper.GetEncounterRecord)
	router.PATCH(options.BaseURL+"/record/encounter/:encounterId", wrapper.UpdateEncounterRecord)
	router.POST(options.BaseURL+"/record/immunization", wrapper.CreateImmunizationRecord)
	router.DELETE(options.BaseURL+"/record/immunization/:immunizationId", wrapper.DeleteImmunizationRecord)
	router.GET(options.BaseURL+"/record/immunization/:immunizationId", wrapper.GetImmunizationRecord)
	router.PATCH(options.BaseURL+"/record/immunization/:immunizationId", wrapper.UpdateImmunizationRecord)
	router.POST(options.BaseURL+"/record/medication", wrapper.CreateMedicationRecord)
	router.DELETE(options.BaseURL+"/record/medication/:medicationId", wrapper.DeleteMedicationRecord)
	router.GET(options.BaseURL+"/record/medication/:medicationId", wrapper.GetMedicationRecord)
	router.PATCH(options.BaseURL+"/record/medication/:medicationId", wrapper.UpdateMedicationRecord)
	router.POST(options.BaseURL+"/record/patient", wrapper.CreatePatientRecord)
	router.DELETE(options.BaseURL+"/record/patient/:patientId", wrapper.DeletePatientRecord)
	router.GET(options.BaseURL+"/record/patient/:patientId", wrapper.GetPatientRecord)
	router.PATCH(options.BaseURL+"/record/patient/:patientId", wrapper.UpdatePatientRecord)
	router.POST(options.BaseURL+"/record/provider", wrapper.CreateProviderRecord)
	router.DELETE(options.BaseURL+"/record/provider/:providerId", wrapper.DeleteProviderRecord)
	router.GET(options.BaseURL+"/record/provider/:providerId", wrapper.GetProviderRecord)
	router.PATCH(options.BaseURL+"/record/provider/:providerId", wrapper.UpdateProviderRecord)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

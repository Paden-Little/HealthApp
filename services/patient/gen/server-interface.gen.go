// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for Gender.
const (
	Female Gender = "female"
	Male   Gender = "male"
)

// Allergy defines model for Allergy.
type Allergy struct {
	// Description Description of the allergy
	Description *string `json:"description,omitempty"`

	// Name Name of the allergy
	Name string `json:"name"`
}

// Gender defines model for Gender.
type Gender string

// Patient defines model for Patient.
type Patient struct {
	Allergies *[]Allergy `json:"allergies,omitempty"`
	Birth     string     `json:"birth"`
	Email     *string    `json:"email,omitempty"`

	// Firstname First and middle names of the patient
	Firstname string `json:"firstname"`
	Gender    Gender `json:"gender"`
	Id        string `json:"id"`

	// Language Preferred language of the patient
	Language *string `json:"language,omitempty"`

	// Lastname Last name of the patient
	Lastname      string          `json:"lastname"`
	Phone         *string         `json:"phone,omitempty"`
	Prescriptions *[]Prescription `json:"prescriptions,omitempty"`
}

// Prescription defines model for Prescription.
type Prescription struct {
	// Dosage Dosage of the medication
	Dosage string `json:"dosage"`

	// End Date the prescription was ended
	End *string `json:"end,omitempty"`

	// Frequency Frequency of the medication
	Frequency string `json:"frequency"`

	// Name Name of the medication
	Name string `json:"name"`

	// ProviderId ID of the provider who prescribed the medication
	ProviderId *string `db:"provider_id" json:"providerId,omitempty"`

	// Start Date the prescription was started
	Start string `json:"start"`
}

// NewPatient defines model for NewPatient.
type NewPatient struct {
	Allergies *[]Allergy `json:"allergies,omitempty"`
	Birth     string     `json:"birth"`
	Email     *string    `json:"email,omitempty"`

	// Firstname First and middle names of the patient
	Firstname string `json:"firstname"`
	Gender    Gender `json:"gender"`

	// Language Preferred language of the patient
	Language *string `json:"language,omitempty"`

	// Lastname Last name of the patient
	Lastname      string          `json:"lastname"`
	Phone         *string         `json:"phone,omitempty"`
	Prescriptions *[]Prescription `json:"prescriptions,omitempty"`
}

// CreatePatientJSONBody defines parameters for CreatePatient.
type CreatePatientJSONBody struct {
	Allergies *[]Allergy `json:"allergies,omitempty"`
	Birth     string     `json:"birth"`
	Email     *string    `json:"email,omitempty"`

	// Firstname First and middle names of the patient
	Firstname string `json:"firstname"`
	Gender    Gender `json:"gender"`

	// Language Preferred language of the patient
	Language *string `json:"language,omitempty"`

	// Lastname Last name of the patient
	Lastname      string          `json:"lastname"`
	Phone         *string         `json:"phone,omitempty"`
	Prescriptions *[]Prescription `json:"prescriptions,omitempty"`
}

// CreatePatientJSONRequestBody defines body for CreatePatient for application/json ContentType.
type CreatePatientJSONRequestBody CreatePatientJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	CheckHealth(c *gin.Context)
	// Get all patients
	// (GET /patient)
	GetPatients(c *gin.Context)
	// Create a patient
	// (POST /patient)
	CreatePatient(c *gin.Context)
	// Delete a patient by ID
	// (DELETE /patient/{id})
	DeletePatient(c *gin.Context, id string)
	// Get a patient by ID
	// (GET /patient/{id})
	GetPatient(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CheckHealth operation middleware
func (siw *ServerInterfaceWrapper) CheckHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckHealth(c)
}

// GetPatients operation middleware
func (siw *ServerInterfaceWrapper) GetPatients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPatients(c)
}

// CreatePatient operation middleware
func (siw *ServerInterfaceWrapper) CreatePatient(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePatient(c)
}

// DeletePatient operation middleware
func (siw *ServerInterfaceWrapper) DeletePatient(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePatient(c, id)
}

// GetPatient operation middleware
func (siw *ServerInterfaceWrapper) GetPatient(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPatient(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.CheckHealth)
	router.GET(options.BaseURL+"/patient", wrapper.GetPatients)
	router.POST(options.BaseURL+"/patient", wrapper.CreatePatient)
	router.DELETE(options.BaseURL+"/patient/:id", wrapper.DeletePatient)
	router.GET(options.BaseURL+"/patient/:id", wrapper.GetPatient)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/cNhD9KwTbozbSurlEtzSLuosW6R5yamAUs+JIYiqRLMmNvTD03wuS+toVHcs5",
	"tBcvDEP8mOG8N2+GfKSFbJUUKKyh+SPV+M8Jjf1ZMo5+4iPeH8ByFNaNCils/wlKNbwAy6VIvxgp3Jwp",
	"amzBfSktFWrbO4GmQV31A26x9R8/aixpTn9IpxDS4MGk773FmXYJtWeFNKegNfjxkWtbO3t8gFY1bm37",
	"7l22ybabbPspy3L/9ycdLY3VXFTOFFvgjTNdrJRcGyugRbfK0BSaKweN5vQXt0RAMNJyxhokbpshsiS2",
	"RqJ6ciKnVSgY6ueQ3oZdXUIbENUJqkgIB40lao2MDHtWHN/AU4h+B2M9ihVeVC0FRilTenK6PrGHmdUy",
	"u13iFcg1Mpp/nmVlBmckdpDC3ehFHr9gYWl36cfqE7qZPgQX4SCvhVIviLrmbTeNBuagdxRhLs79xxnt",
	"Txpf0eA9LVEm9HZUGIpT67a20DiGSvQfd5GwZtX8WqQvL1LOoqG91u61aDmjyXcXcEIvzlqWqTRRsnd+",
	"fqCmRdbfUFGdCRZxABYDrbPzyT0Y4kJ2kCZB32Q3qwRd+ktVFOeIbIeldSE/31K+ba+0/MoZ6n0E+X43",
	"KqrfRe5rOfBwRLb0P1GR9b9N5N/wWwSU0IeNBMU3hWRYodjgg9WwsVCFHB9pPkb8F2deYcaCti9Jmzf4",
	"rsTFmnAyKG+e1SGq+D3ERSmXAX+quSHcECCGu6jI+8OelFKTFgRUXFRDXRsXGLc+7r51u700oV9Rm+Bs",
	"+yZ7k7n8SoUCFKc5/clPJVSBrT2baY3QhJZcoWfQ1ZPPpFMD/VBj8fevYY8DbpQUJhTbTZYtAfzxW8jH",
	"qW1Bn2lOgy0pnB+/lKrppokeeYv2MIGMHbn6ubmuffXxLDtXlzyH7hatu66nrLhqkiZGpEaweBi78vSi",
	"Pj8V4MWjO529uLsFLdsX0bKKjSX6AIFdURBmCYw3zjzJ6SNnXVBJgxaXtOz8/ESLAg0tWtSG5p8Xd2Yv",
	"9P2OugJyfQC8LkMDDHfL5QMvmcG+LuS7BY1vI11Ukg89r5e4Q+QTbnI8u8D82+Gbqv7fUWb/hVhcqST0",
	"bYzSAaCQlpTyJFisqK5p7bru3wAAAP//NwSBCZUOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

package main

import (
	"fmt"
	"log"
	"os"

	"github.com/google/uuid"
	capi "github.com/hashicorp/consul/api"
)

// RegisterService registers a service with Consul, automatically generating tags, service ID, and retrieving hostname
//
// Autogenerated tags: traefik.enable=true, traefik.http.routers.<service_name>.rule=PathPrefix(`<service_path>`)
func RegisterService(consulAddress, serviceName, servicePath string, port int) string {
	consulConfig := capi.DefaultConfig()
	consulConfig.Address = consulAddress
	consulClient, err := capi.NewClient(consulConfig)
	if err != nil {
		log.Fatalf("failed to get consul client: %v\n", err)
	}

	id := serviceName + "-" + uuid.New().String()
	tags := []string{
		"traefik.enable=true",
		fmt.Sprintf("traefik.http.routers.%s.rule=PathPrefix(`%s`)", serviceName, servicePath),
	}

	// Get hostname
	host, err := os.Hostname()
	if err != nil {
		log.Fatalf("failed to get host: %v\n", err)
	}

	// Register service with tags, id, and other configurations
	serviceReg := &capi.AgentServiceRegistration{
		ID:      id,
		Tags:    tags,
		Name:    serviceName,
		Port:    port,
		Address: host,
		Check: &capi.AgentServiceCheck{
			HTTP:     fmt.Sprintf("http://%s:%d/health", host, port),
			Interval: "10s",
			Timeout:  "3s",
		},
	}
	err = consulClient.Agent().ServiceRegister(serviceReg)

	if err != nil {
		log.Fatalf("failed to register service: %v\n", err)
	}

	log.Printf("Service %s with id %s registered in consul\n", serviceName, id)

	return id
}

// DeregisterService deregisters a service from Consul using the service ID
func DeregisterService(consulAddress, id string) {
	consulConfig := capi.DefaultConfig()
	consulConfig.Address = consulAddress
	consulClient, err := capi.NewClient(consulConfig)
	if err != nil {
		log.Fatalf("failed to get consul client: %v\n", err)
	}

	err = consulClient.Agent().ServiceDeregister(id)
	if err != nil {
		log.Fatalf("failed to deregister service: %v\n", err)
	}

	log.Printf("Service with id %s deregistered from consul\n", id)
}
